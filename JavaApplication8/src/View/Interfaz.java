package View;

import Persistence1.MSAccess;
import Logic.Employee;
import Logic.XMLFile;
import FlatFiles.FlatFile;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import login.persistence.VInicio;

/**
 *
 * @author Estudiante
 */
public class Interfaz extends javax.swing.JFrame {
    private MSAccess dataFile;
    private ImageIcon iconNoPhoto;

    public MSAccess getDataFile() {
        return dataFile;
    }

    public void setDataFile(MSAccess dataFile) {
        this.dataFile = dataFile;
    }
    
    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
       
        labPhotoFilename.setVisible(false);
        this.setIconNoPhoto((ImageIcon)labPhoto.getIcon());

        this.setDataFile(new MSAccess());
        this.selectEmployee();
        
        
        setLocationRelativeTo(null);
    }

  

    /**
     * Set data file
     * @param dataFile data file
     */
    

    /**
     * Get Image Icon
     * @return Image Icon
     */
    public ImageIcon getIconNoPhoto() {
        return iconNoPhoto;
    }

    /**
     * Set Image Icon
     * @param iconNoPhoto Image Icon
     */
    public void setIconNoPhoto(ImageIcon iconNoPhoto) {
        this.iconNoPhoto = iconNoPhoto;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GroupGenero = new javax.swing.ButtonGroup();
        panDatosPersonales = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        lblGener = new javax.swing.JLabel();
        lblBornDate = new javax.swing.JLabel();
        lblAdmissionDate = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        labPhoto = new javax.swing.JLabel();
        radFemale = new javax.swing.JRadioButton();
        radMale = new javax.swing.JRadioButton();
        dateBorn = new com.toedter.calendar.JDateChooser();
        dateAdmission = new com.toedter.calendar.JDateChooser();
        labId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        labSalario = new javax.swing.JLabel();
        txtSalary = new javax.swing.JTextField();
        labPhotoFilename = new javax.swing.JLabel();
        butPhoto = new javax.swing.JButton();
        panCrud = new javax.swing.JPanel();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema de Empleados Usta");
        setUndecorated(true);

        panDatosPersonales.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Personal information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        panDatosPersonales.setToolTipText("");

        lblName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblName.setText("Name:");

        lblLastName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblLastName.setText("Lastname:");

        lblGener.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblGener.setText("Gender");

        lblBornDate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblBornDate.setText("Date birth");

        lblAdmissionDate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAdmissionDate.setText("Admissions date");

        labPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/employee/view/noPhoto.jpg"))); // NOI18N

        GroupGenero.add(radFemale);
        radFemale.setSelected(true);
        radFemale.setText("Femenino");

        GroupGenero.add(radMale);
        radMale.setText("Masculino");

        labId.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labId.setText("Id:");

        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });

        labSalario.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labSalario.setText("Salary");

        butPhoto.setText("Load Photo");
        butPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPhotoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panDatosPersonalesLayout = new javax.swing.GroupLayout(panDatosPersonales);
        panDatosPersonales.setLayout(panDatosPersonalesLayout);
        panDatosPersonalesLayout.setHorizontalGroup(
            panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLastName)
                            .addComponent(lblGener)
                            .addComponent(labId)
                            .addComponent(lblName))
                        .addGap(78, 78, 78)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                                .addComponent(radFemale)
                                .addGap(18, 18, 18)
                                .addComponent(radMale))
                            .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtId, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))))
                    .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBornDate)
                            .addComponent(lblAdmissionDate)
                            .addComponent(labSalario))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateBorn, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                            .addComponent(dateAdmission, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtSalary))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                        .addComponent(labPhotoFilename)
                        .addGap(32, 32, 32)
                        .addComponent(butPhoto)))
                .addGap(52, 52, 52))
        );
        panDatosPersonalesLayout.setVerticalGroup(
            panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblName)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLastName)
                            .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGener)
                            .addComponent(radFemale)
                            .addComponent(radMale)))
                    .addComponent(labPhoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBornDate)
                            .addComponent(dateBorn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAdmissionDate)
                                    .addComponent(dateAdmission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(labPhotoFilename)))
                        .addGap(18, 18, 18)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labSalario)
                            .addComponent(txtSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(butPhoto)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panCrud.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operations ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        btnNext.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNext.setText(">");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnLast.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnLast.setText(">|");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSearch.setText("Search ...");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnNew.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnFirst.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnFirst.setText("|<");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPrevious.setText("<");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panCrudLayout = new javax.swing.GroupLayout(panCrud);
        panCrud.setLayout(panCrudLayout);
        panCrudLayout.setHorizontalGroup(
            panCrudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCrudLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnFirst)
                .addGap(18, 18, 18)
                .addComponent(btnPrevious)
                .addGap(16, 16, 16)
                .addComponent(btnNext)
                .addGap(18, 18, 18)
                .addComponent(btnLast)
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addGap(10, 10, 10)
                .addComponent(btnNew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panCrudLayout.setVerticalGroup(
            panCrudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panCrudLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(panCrudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext)
                    .addComponent(btnLast)
                    .addComponent(btnSearch)
                    .addComponent(btnDelete)
                    .addComponent(btnFirst)
                    .addComponent(btnPrevious)
                    .addComponent(btnNew)
                    .addComponent(btnUpdate)))
        );

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/employee/view/X_ico.gif"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Employees Pharmacy");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(panDatosPersonales, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panCrud, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panDatosPersonales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panCrud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * New Employee record 
     * @param evt 
     */
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
//       if (btnNew.getText().equalsIgnoreCase("New")){
//           newInterface();
//       }
//       else
//           saveInterfaz(); 
        if (btnNew.getText().equals("New")) {
            this.newView();
        }
        else if (btnNew.getText().equals("Save")) {
            if (validateView()) {
                this.insertEmployee();

                btnNew.setText("New");
                btnFirst.setEnabled(true);
                btnPrevious.setEnabled(true);
                btnNext.setEnabled(true);
                btnLast.setEnabled(true);
                btnSearch.setEnabled(true);
                btnUpdate.setEnabled(true);
                btnDelete.setEnabled(true);
            }
            else {
                JOptionPane.showMessageDialog(this, "Please, fill the requeried fields", 
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        try {
            this.getDataFile().getResultSet().first();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        try {
            if (!this.getDataFile().getResultSet().isFirst()) {
                this.getDataFile().getResultSet().previous();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        try {
            if (!this.getDataFile().getResultSet().isLast()) {
                this.getDataFile().getResultSet().next();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
//        long id = Long.parseLong(JOptionPane.showInputDialog(
//                "Please, write the employee id" , "Employee id"));
//        if (id > 0) {
//            int index = -1;
//            boolean find = false;
//            for (Employee employee : this.getEmployeeList()) {
//                index++;
//                if (employee.getId() == id) {
//                    this.setIndexEmployee(index);
//                    this.updateInterface();
//                    find = true;
//                    break;
//                }
//            }
//            if (!find) {
//                JOptionPane.showMessageDialog(this, "Employee " + id + " was not found!");
//            }
//        }
        long id = Long.parseLong(JOptionPane.showInputDialog(
                "Please, write the Sale id", "Sale id"));
        if (id > 0) {
            this.searchEmployee(id);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        this.updateEmployee();
        JOptionPane.showMessageDialog(this, "Updated record!", "Update record",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, 
                "Are you sure to delete this record?", "Delete record", 
                JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

            this.deleteEmployee();
            JOptionPane.showMessageDialog(this, "Deleted record!", "Delete record",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void butPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPhotoActionPerformed
        JFileChooser fc = new JFileChooser();
        int select = fc.showOpenDialog(this);
        if(select == JFileChooser.APPROVE_OPTION ){
            try {
                File photoFile = fc.getSelectedFile();
                labPhotoFilename.setText(photoFile.getCanonicalPath());
                ImageIcon iconPhoto = new ImageIcon(labPhotoFilename.getText());
                labPhoto.setIcon(iconPhoto);
            } catch (IOException ex) {
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
                
    }//GEN-LAST:event_butPhotoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        VInicio vi = new VInicio();
        vi.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        try {
            this.getDataFile().getResultSet().last();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLastActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup GroupGenero;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton butPhoto;
    private com.toedter.calendar.JDateChooser dateAdmission;
    private com.toedter.calendar.JDateChooser dateBorn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labId;
    private javax.swing.JLabel labPhoto;
    private javax.swing.JLabel labPhotoFilename;
    private javax.swing.JLabel labSalario;
    private javax.swing.JLabel lblAdmissionDate;
    private javax.swing.JLabel lblBornDate;
    private javax.swing.JLabel lblGener;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblName;
    private javax.swing.JPanel panCrud;
    private javax.swing.JPanel panDatosPersonales;
    private javax.swing.JRadioButton radFemale;
    private javax.swing.JRadioButton radMale;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSalary;
    // End of variables declaration//GEN-END:variables

    //    private void updateInterface() { 
//       if(this.getIndexProduct() != -1){
//           ProductSale product = this.getProductList().get(this.getIndexProduct());
//           
//           txtId.setText("" + product.getId());
//           txtName.setText(product.getName());
////           txtApellido.setText(product.getApellido());
//           
//           labPhotoFilename.setText((product.getPhoto().equals("")) ?
//                   this.path + "noPhoto.jpg" :
//                   product.getPhoto());
//                   ImageIcon photo = new ImageIcon(labPhotoFilename.getText());
//                   labPhoto.setIcon(photo);
//       
//           
//           //ComboType.setSelected(product.getKind_of_product()==1);
//           //ComboType.setSelectedItem(product.getDate_of_admission()==0);
//            String seleccionado=(String)ComType.getSelectedItem();
//            setTitle(seleccionado);
//           //radFemenino.setSelected(product.getKind_of_product()==0);
//           //radMasculino.setSelected(product.getKind_of_product()==1);
////           dateFechaNacimiento.setDate(product.getFechaNacimiento());
//           dateDate_of_admission.setDate(product.getDate_of_admission());
//           txtPrice.setText("" + product.getPrice());
////           txtCalcularEdad.setText("Age: " + product.getEdadEmpleado()/365 + " years ");
////           txtCalcularAntiguedad.setText("Old: " + product.getAntiguedad()/365 + "     years ");
//           NumberFormat nf = NumberFormat.getCurrencyInstance(Locale.getDefault());
////           txtCalcularPrestaciones.setText("Benefits " + nf.format(product.getPrestaciones()));
//       }
//       else{
//           this.newInterface();
//       }
//    }
    
    /**
     * You prepare the interface to enter a new item
     */
//    private void newInterface() {
//        txtId1.setText("");
//        txtName1.setText("");
//        txtId.setText("");
//        txtName.setText("");
////        txtApellido.setText("");
//        
//        labPhotoFilename.setText(this.path + "noPhoto.jpg");
//        ImageIcon photo = new ImageIcon(labPhotoFilename.getText());
//        labPhoto.setIcon(photo);
//        
//        ComType.setSelectedItem(box);
//        
//        //radFemenino.setSelected(true);
//        //radMasculino.setSelected(false);
////        dateFechaNacimiento.setDate(new Date(95,0,6));
//        dateDate_of_admission.setDate(new Date(105,0,2));
//        txtPrice.setText("");
////        txtCalcularEdad.setText("Age: ");
////        txtCalcularAntiguedad.setText("Old: ");
////        txtCalcularPrestaciones.setText"Benefits: ");
//        
//        btnNew.setEnabled(false);
//        btnFirst.setEnabled(false);
//        btnPrevious.setEnabled(false);
//        btnNext.setEnabled(false);
//        btnLast.setEnabled(false);
//        btnSearch.setEnabled(true);
//        btnDelete.setEnabled(false);    
//        btnUpdate.setEnabled(false);
//    }
    
    /**
     * You validate and store item 
     */

//    private void saveInterfaz() {
//       if (txtId1.getText().equals("") || txtName1.getText().equals("") ||txtId.getText().equals("") 
//               || txtName.getText().equals("") 
////               || txtApellido.getText().equals("")
////               || (dateFechaNacimiento.getDate() == null)
//               
//               || (dateDate_of_admission.getDate() == null)
//               || txtPrice.getText().equals("")) {
//           JOptionPane.showMessageDialog(this, "Plaese fill the requiered fields","Error",JOptionPane.ERROR_MESSAGE);
//       }
//       else{
//           ProductSale product = interface2Object();
//           this.getProductList().add(product);
//           this.setIndexProduct(this.getIndexProduct()+1);
//           
//           FlatFileSale dataFile = new FlatFileSale();
//           dataFile.writeFile(this.getProductList(),this.fileName,this.separator);
//           
////           txtCalcularEdad.setText("Age: " + product.getEdadEmpleado()/365 + " years ");
////           txtCalcularAntiguedad.setText("Old: " + product.getAntiguedad()/365 + " years ");
////           NumberFormat nf = NumberFormat.getCurrencyInstance(Locale.getDefault());
////           txtCalcularPrestaciones.setText("Benefits " + nf.format(product.getPrestaciones()));
//           
//        btnNew.setText("New sale");
//        btnFirst.setEnabled(true);
//        btnPrevious.setEnabled(true);
//        btnNext.setEnabled(true);
//        btnLast.setEnabled(true);
//        btnSearch.setEnabled(true);
//        btnDelete.setEnabled(false);
//        btnUpdate.setEnabled(false);
//       }
//    }

    /**
     * You obtain data from the interface and passes it to an object 
     * @return Employee object 
     */
//    private ProductSale interface2Object() {
//        ProductSale product = new ProductSale();
//        
//        product.setIdSell(Long.parseLong(txtId1.getText()));
//        product.setNameSell(txtName1.getText());
//        product.setId(Long.parseLong(txtId.getText()));
//        product.setName(txtName.getText());
////        product.setApellido(txtApellido.getText());
//        product.setPhoto(labPhotoFilename.getText());
//        product.setKind_of_product(ComType.getSelectedItem().toString());
//        //product.setKind_of_product((String) (ComType.toString()? 0 : 1));
////        product.setFechaNacimiento(dateFechaNacimiento.getDate());
//        product.setDate_of_admission(dateDate_of_admission.getDate());
//        product.setPrice(Integer.parseInt(txtPrice.getText()));
//        
//        return product;
//    }
//    
//    public void getBox(String boxType){
//        box = boxType;
//    }
    
     private boolean validateView() {
        boolean validate = !(txtId.getText().equals("")
                || txtLastName.getText().equals("")
                || (dateBorn.getDate() == null)
                || (dateAdmission.getDate() == null)
                || txtSalary.getText().equals(""));

        return validate;
    }

    /**
     * Obtain the view data and tranfer it to the object
     */
    private Employee view2Object() {
        Employee employee = new Employee();

        employee.setId(Long.parseLong(txtId.getText()));
        employee.setNombre(txtName.getText());
        employee.setFoto(labPhotoFilename.getText());
        employee.setGenero(radFemale.isSelected() ? 0 : 1);
        employee.setFechaNacimiento(dateBorn.getDate());
        employee.setFechaIngreso(dateAdmission.getDate());
        employee.setSalario(Integer.parseInt(txtSalary.getText()));
        
        return employee;
    }

    /**
     * You obtain data from an object and pass it to the view
     */
    private void updateView() {
        if (this.getDataFile().getResultSet() == null) {
            this.newView();
        }
        else {
            this.object2View();
        }
    }

    /**
     * You prepare the view to enter a new employee data
     */
    private void newView() {
        
        txtId.setText("");
        txtName.setText("");
        txtLastName.setText("");
        labPhotoFilename.setText("");
        labPhoto.setIcon(this.getIconNoPhoto());
        //radFemale.setSelected(true);
        dateBorn.setDate(new Date(90, 0, 1));
        dateAdmission.setDate(new Date(108, 6, 15));
        txtSalary.setText("");
        
//        labAge.setText("Age: ");
//        labOld.setText("Old: ");
//        labBenefits.setText("Benefits: ");
        
        btnNew.setText("Save");
        btnFirst.setEnabled(false);
        btnPrevious.setEnabled(false);
        btnNext.setEnabled(false);
        btnLast.setEnabled(false);
        btnSearch.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
    }

    /**
     * Result set -> object
     */
    private void object2View() {
        Employee employee = new Employee();
        try {
            employee.setId(this.getDataFile().getResultSet().getLong("id"));
            employee.setNombre(this.getDataFile().getResultSet().getString("Name"));
            employee.setApellido(this.getDataFile().getResultSet().getString("Lastname"));
            employee.setFoto(
                    (this.getDataFile().getResultSet().getString("photo") == null) 
                            ? "" : this.getDataFile().getResultSet().getString("photo"));
            employee.setGenero(this.getDataFile().getResultSet().getInt("Gender"));
            employee.setFechaNacimiento(this.getDataFile().getResultSet().getDate("BornDate"));
            employee.setFechaIngreso(this.getDataFile().getResultSet().getDate("HiredDate"));
            employee.setSalario(this.getDataFile().getResultSet().getInt("Salary"));

            this.object2View(employee);
        } catch (SQLException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Show the object data into view
     * @param employee Employee to show
     */
    private void object2View(Employee employee) {
        
        txtId.setText("" + employee.getId());
        txtName.setText(employee.getNombre());
        txtLastName.setText(employee.getApellido());

        if (employee.getFoto().equals("")) {
            labPhotoFilename.setText("");
            labPhoto.setIcon(this.getIconNoPhoto());
        }
        else {
            labPhotoFilename.setText(employee.getFoto());
            ImageIcon iconPhoto = new ImageIcon(labPhotoFilename.getText());
            labPhoto.setIcon(iconPhoto);
        }
        radFemale.setSelected(employee.getGenero() == 0);
        dateBorn.setDate(employee.getFechaNacimiento());
        dateAdmission.setDate(employee.getFechaIngreso());
        txtSalary.setText("" + employee.getSalario());
    }

    /**
     * Select employees from DB
     */
    private void selectEmployee() {
        String query = "SELECT * FROM Employee";
        if (this.getDataFile().execute(query)) {
            try {
                this.getDataFile().getResultSet().next();
                this.updateView();
            } catch (SQLException ex) {
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * Insert new employee
     */
    private void insertEmployee() {
        Employee employee = this.view2Object();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        String query = "INSERT INTO SaleProduct "
                + "(id, Name,Lastname, Photo, Gender, BornDate, HiredDate, Salary) "
                + "VALUES ("
                + employee.getId() + ", '"
                + employee.getNombre()+ "', '"
                + employee.getApellido()+ "', '"
                + employee.getFoto() + "', "         //"', "
                + employee.getGenero() + ", #"
                + dateFormat.format(employee.getFechaNacimiento()) + "#, #"
                + dateFormat.format(employee.getFechaIngreso()) + "#, "
                + employee.getSalario() + ")";
        if (this.getDataFile().execute(query)) {
            this.selectEmployee();
            this.searchEmployee(employee.getId());
        }
    }

    /**
     * Update employee
     */
    private void updateEmployee() {
        Employee employee = this.view2Object();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        String query = "UPDATE SaleProduct SET "
                + "Name = '" + employee.getNombre()+ "', "
                + "Lastname = '" + employee.getApellido()+ "', "
                + "Photo = '" + employee.getFoto() + "', "
                + "Gender = " + employee.getGenero()+ ", "
                + "BornDate = #" + dateFormat.format(employee.getFechaNacimiento()) + "#, "
                + "AdmissionDate = #" + dateFormat.format(employee.getFechaIngreso()) + "#, "
                + "Salary = " + employee.getSalario()+ " "
                + "WHERE Id = " + employee.getId();
        if (this.getDataFile().execute(query)) {
            this.selectEmployee();
            this.searchEmployee(employee.getId());
        }
    }

    /**
     * Delete employee
     */
    private void deleteEmployee() {
        Employee employee = this.view2Object();
        String query = "DELETE * FROM SaleProduct WHERE id = " + employee.getId();
        if (this.getDataFile().execute(query)) {
            this.selectEmployee();
        }        
    }

    /**
     * Search employee by id
     * @param id Employee id
     */
    private void searchEmployee(long id) {
        boolean find = false;
        try {
            if (this.getDataFile().getResultSet() != null) {
                Long lastId = this.getDataFile().getResultSet().getLong("Id");
                this.getDataFile().getResultSet().beforeFirst();
                while (this.getDataFile().getResultSet().next()) {
                    if (this.getDataFile().getResultSet().getLong("Id") == id) {
                        find = true;
                        break;
                    }
                }
                if (find) {
                    this.updateView();
                }
                else {
                    this.getDataFile().getResultSet().first();
                    this.searchEmployee(lastId);
                    JOptionPane.showMessageDialog(this, "Employee " + id + " was not found!");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
