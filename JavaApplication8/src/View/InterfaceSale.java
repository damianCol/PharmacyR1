package View;

import Persistence1.MSAccess;
import Logic.ProductSale;
import FlatFiles.FlatFileSale;
import java.io.File;
import java.io.IOException;
import java.text.NumberFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Logic.Queue;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import login.persistence.VInicio;


/**
 *
 * @author Estudiante
 */
public class InterfaceSale extends javax.swing.JFrame {
    private MSAccess dataFile;
    private ImageIcon iconNoPhoto;
    
     Queue cl= new Queue();
    /**
     * Creates new form Interfaz
     */
    public InterfaceSale() {
        initComponents();
        
        labPhotoFilename.setVisible(false);
        this.setIconNoPhoto((ImageIcon)labPhoto.getIcon());

        this.setDataFile(new MSAccess());
        this.selectSale();
        
        setLocationRelativeTo(null);
    }
public MSAccess getDataFile() {
        return dataFile;
    }

    /**
     * Set data file
     * @param dataFile data file
     */
    public void setDataFile(MSAccess dataFile) {
        this.dataFile = dataFile;
    }

    /**
     * Get Image Icon
     * @return Image Icon
     */
    public ImageIcon getIconNoPhoto() {
        return iconNoPhoto;
    }

    /**
     * Set Image Icon
     * @param iconNoPhoto Image Icon
     */
    public void setIconNoPhoto(ImageIcon iconNoPhoto) {
        this.iconNoPhoto = iconNoPhoto;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GroupGenero = new javax.swing.ButtonGroup();
        panDatosPersonales = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblSex = new javax.swing.JLabel();
        lblDate_of_admission = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        labPhoto = new javax.swing.JLabel();
        dateDate_of_admission = new com.toedter.calendar.JDateChooser();
        labId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        labPrice = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        labPhotoFilename = new javax.swing.JLabel();
        ComType1 = new javax.swing.JComboBox();
        labId1 = new javax.swing.JLabel();
        lblName1 = new javax.swing.JLabel();
        txtName1 = new javax.swing.JTextField();
        txtId1 = new javax.swing.JTextField();
        butPhoto = new javax.swing.JButton();
        panCrud = new javax.swing.JPanel();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnSale = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema de Empleados Usta");
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panDatosPersonales.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Product dates", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        panDatosPersonales.setToolTipText("");

        lblName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblName.setText("Name:");

        lblSex.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSex.setText("kind of product:");

        lblDate_of_admission.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblDate_of_admission.setText("Date of admission:");

        labPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/saleI/view/noPhoto.jpg"))); // NOI18N

        labId.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labId.setText("Id:");

        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });

        labPrice.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labPrice.setText("Price:");

        ComType1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "q" }));

        labId1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labId1.setText("Identification:");

        lblName1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblName1.setText("Customer name:");

        txtId1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtId1ActionPerformed(evt);
            }
        });

        butPhoto.setText("Load Photo");
        butPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPhotoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panDatosPersonalesLayout = new javax.swing.GroupLayout(panDatosPersonales);
        panDatosPersonales.setLayout(panDatosPersonalesLayout);
        panDatosPersonalesLayout.setHorizontalGroup(
            panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDate_of_admission)
                            .addComponent(labPrice))
                        .addGap(30, 30, 30)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateDate_of_admission, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                                .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labId1)
                                    .addComponent(lblName1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtId1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtName1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                                .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSex)
                                    .addComponent(labId)
                                    .addComponent(lblName))
                                .addGap(42, 42, 42)
                                .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ComType1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(111, 111, 111)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labPhotoFilename, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(46, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panDatosPersonalesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(butPhoto)
                .addGap(64, 64, 64))
        );
        panDatosPersonalesLayout.setVerticalGroup(
            panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtId1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labId1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName1)
                            .addComponent(txtName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSex)
                            .addComponent(ComType1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                        .addComponent(labPhotoFilename, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butPhoto))
                    .addGroup(panDatosPersonalesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblDate_of_admission)
                            .addComponent(dateDate_of_admission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(panDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labPrice)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        getContentPane().add(panDatosPersonales, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 46, 593, -1));

        panCrud.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operations ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        btnNext.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNext.setText(">");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnLast.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnLast.setText(">|");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSearch.setText("Search ...");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnNew.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnFirst.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnFirst.setText("|<");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPrevious.setText("<");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnSale.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSale.setText("Sale");
        btnSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panCrudLayout = new javax.swing.GroupLayout(panCrud);
        panCrud.setLayout(panCrudLayout);
        panCrudLayout.setHorizontalGroup(
            panCrudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCrudLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panCrudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panCrudLayout.createSequentialGroup()
                        .addComponent(btnFirst)
                        .addGap(18, 18, 18)
                        .addComponent(btnPrevious)
                        .addGap(16, 16, 16)
                        .addComponent(btnNext)
                        .addGap(18, 18, 18)
                        .addComponent(btnLast)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)
                        .addGap(10, 10, 10)
                        .addComponent(btnNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
                    .addComponent(btnSale, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panCrudLayout.setVerticalGroup(
            panCrudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCrudLayout.createSequentialGroup()
                .addGroup(panCrudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext)
                    .addComponent(btnLast)
                    .addComponent(btnSearch)
                    .addComponent(btnDelete)
                    .addComponent(btnFirst)
                    .addComponent(btnPrevious)
                    .addComponent(btnNew)
                    .addComponent(btnUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(btnSale)
                .addContainerGap())
        );

        getContentPane().add(panCrud, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 410, 616, 100));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Sale products");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 11, -1, -1));

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Long.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 510, 600, 100));

        jButton2.setText("Logout");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
         try {
            this.getDataFile().getResultSet().first();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceSale.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
       try {
            if (!this.getDataFile().getResultSet().isFirst()) {
                this.getDataFile().getResultSet().previous();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceSale.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        try {
            if (!this.getDataFile().getResultSet().isLast()) {
                this.getDataFile().getResultSet().next();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceSale.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
       long id = Long.parseLong(JOptionPane.showInputDialog(
                "Please, write the Sale id", "Sale id"));
        if (id > 0) {
            this.searchSale(id);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        this.updateSale();
        JOptionPane.showMessageDialog(this, "Updated record!", "Update record",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, 
                "Are you sure to delete this record?", "Delete record", 
                JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

            this.deleteSale();
            JOptionPane.showMessageDialog(this, "Deleted record!", "Delete record",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaleActionPerformed
       
        
        
        ProductSale pa = new ProductSale();
        
        pa.setIdSell(Long.parseLong(txtId1.getText()));
        txtId1.setText("");
        pa.setNameSell(txtName1.getText());
        txtName1.setText("");
        pa.setId(Long.parseLong(txtId.getText()));
        txtId.setText("");
        pa.setName(txtName.getText());
        txtName.setText("");
         
        pa.setType(ComType1.getSelectedItem().toString());
        
       
        pa.setDate_of_admission(dateDate_of_admission.getDate());
        dateDate_of_admission.setDate(null);
        pa.setPrice(Integer.parseInt(txtPrice.getText()));
        txtPrice.setText("");

        
        cl.encolar(pa);
        JOptionPane.showMessageDialog(this, "Ssale has been made successfully");  
        llenarLista();
        
    }//GEN-LAST:event_btnSaleActionPerformed

    /**
     * New Employee record 
     * @param evt 
     */
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        if (btnNew.getText().equals("New")) {
            this.newView();
        }
        else if (btnNew.getText().equals("Save")) {
            if (validateView()) {
                this.insertSale();

                btnNew.setText("New");
                btnFirst.setEnabled(true);
                btnPrevious.setEnabled(true);
                btnNext.setEnabled(true);
                btnLast.setEnabled(true);
                btnSearch.setEnabled(true);
                btnUpdate.setEnabled(true);
                btnDelete.setEnabled(true);
            }
            else {
                JOptionPane.showMessageDialog(this, "Please, fill the requeried fields", 
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnNewActionPerformed

    private void txtId1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtId1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtId1ActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        try {
            this.getDataFile().getResultSet().last();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceSale.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLastActionPerformed

    private void butPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPhotoActionPerformed
        JFileChooser fc = new JFileChooser();
        int select = fc.showOpenDialog(this);
        if (select == JFileChooser.APPROVE_OPTION) {
            try {
                File photoFile = fc.getSelectedFile();
                labPhotoFilename.setText(photoFile.getCanonicalPath());
                ImageIcon iconPhoto = new ImageIcon(labPhotoFilename.getText());
                labPhoto.setIcon(iconPhoto);
            } catch (IOException ex) {
                Logger.getLogger(InterfaceSale.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_butPhotoActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        VInicio vi = new VInicio();
        vi.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceSale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceSale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceSale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceSale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfaceSale().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JComboBox ComType1;
    private javax.swing.ButtonGroup GroupGenero;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnSale;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton butPhoto;
    private com.toedter.calendar.JDateChooser dateDate_of_admission;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labId;
    private javax.swing.JLabel labId1;
    private javax.swing.JLabel labPhoto;
    private javax.swing.JLabel labPhotoFilename;
    private javax.swing.JLabel labPrice;
    private javax.swing.JLabel lblDate_of_admission;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblSex;
    private javax.swing.JPanel panCrud;
    private javax.swing.JPanel panDatosPersonales;
    private javax.swing.JTable table1;
    public javax.swing.JTextField txtId;
    private javax.swing.JTextField txtId1;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtName1;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables

//    private void updateInterface() { 
//       if(this.getIndexProduct() != -1){
//           ProductSale product = this.getProductList().get(this.getIndexProduct());
//           
//           txtId.setText("" + product.getId());
//           txtName.setText(product.getName());
////           txtApellido.setText(product.getApellido());
//           
//           labPhotoFilename.setText((product.getPhoto().equals("")) ?
//                   this.path + "noPhoto.jpg" :
//                   product.getPhoto());
//                   ImageIcon photo = new ImageIcon(labPhotoFilename.getText());
//                   labPhoto.setIcon(photo);
//       
//           
//           //ComboType.setSelected(product.getKind_of_product()==1);
//           //ComboType.setSelectedItem(product.getDate_of_admission()==0);
//            String seleccionado=(String)ComType.getSelectedItem();
//            setTitle(seleccionado);
//           //radFemenino.setSelected(product.getKind_of_product()==0);
//           //radMasculino.setSelected(product.getKind_of_product()==1);
////           dateFechaNacimiento.setDate(product.getFechaNacimiento());
//           dateDate_of_admission.setDate(product.getDate_of_admission());
//           txtPrice.setText("" + product.getPrice());
////           txtCalcularEdad.setText("Age: " + product.getEdadEmpleado()/365 + " years ");
////           txtCalcularAntiguedad.setText("Old: " + product.getAntiguedad()/365 + "     years ");
//           NumberFormat nf = NumberFormat.getCurrencyInstance(Locale.getDefault());
////           txtCalcularPrestaciones.setText("Benefits " + nf.format(product.getPrestaciones()));
//       }
//       else{
//           this.newInterface();
//       }
//    }
    
    /**
     * You prepare the interface to enter a new item
     */
//    private void newInterface() {
//        txtId1.setText("");
//        txtName1.setText("");
//        txtId.setText("");
//        txtName.setText("");
////        txtApellido.setText("");
//        
//        labPhotoFilename.setText(this.path + "noPhoto.jpg");
//        ImageIcon photo = new ImageIcon(labPhotoFilename.getText());
//        labPhoto.setIcon(photo);
//        
//        ComType.setSelectedItem(box);
//        
//        //radFemenino.setSelected(true);
//        //radMasculino.setSelected(false);
////        dateFechaNacimiento.setDate(new Date(95,0,6));
//        dateDate_of_admission.setDate(new Date(105,0,2));
//        txtPrice.setText("");
////        txtCalcularEdad.setText("Age: ");
////        txtCalcularAntiguedad.setText("Old: ");
////        txtCalcularPrestaciones.setText"Benefits: ");
//        
//        btnNew.setEnabled(false);
//        btnFirst.setEnabled(false);
//        btnPrevious.setEnabled(false);
//        btnNext.setEnabled(false);
//        btnLast.setEnabled(false);
//        btnSearch.setEnabled(true);
//        btnDelete.setEnabled(false);    
//        btnUpdate.setEnabled(false);
//    }
    
    /**
     * You validate and store item 
     */

//    private void saveInterfaz() {
//       if (txtId1.getText().equals("") || txtName1.getText().equals("") ||txtId.getText().equals("") 
//               || txtName.getText().equals("") 
////               || txtApellido.getText().equals("")
////               || (dateFechaNacimiento.getDate() == null)
//               
//               || (dateDate_of_admission.getDate() == null)
//               || txtPrice.getText().equals("")) {
//           JOptionPane.showMessageDialog(this, "Plaese fill the requiered fields","Error",JOptionPane.ERROR_MESSAGE);
//       }
//       else{
//           ProductSale product = interface2Object();
//           this.getProductList().add(product);
//           this.setIndexProduct(this.getIndexProduct()+1);
//           
//           FlatFileSale dataFile = new FlatFileSale();
//           dataFile.writeFile(this.getProductList(),this.fileName,this.separator);
//           
////           txtCalcularEdad.setText("Age: " + product.getEdadEmpleado()/365 + " years ");
////           txtCalcularAntiguedad.setText("Old: " + product.getAntiguedad()/365 + " years ");
////           NumberFormat nf = NumberFormat.getCurrencyInstance(Locale.getDefault());
////           txtCalcularPrestaciones.setText("Benefits " + nf.format(product.getPrestaciones()));
//           
//        btnNew.setText("New sale");
//        btnFirst.setEnabled(true);
//        btnPrevious.setEnabled(true);
//        btnNext.setEnabled(true);
//        btnLast.setEnabled(true);
//        btnSearch.setEnabled(true);
//        btnDelete.setEnabled(false);
//        btnUpdate.setEnabled(false);
//       }
//    }

    /**
     * You obtain data from the interface and passes it to an object 
     * @return Employee object 
     */
//    private ProductSale interface2Object() {
//        ProductSale product = new ProductSale();
//        
//        product.setIdSell(Long.parseLong(txtId1.getText()));
//        product.setNameSell(txtName1.getText());
//        product.setId(Long.parseLong(txtId.getText()));
//        product.setName(txtName.getText());
////        product.setApellido(txtApellido.getText());
//        product.setPhoto(labPhotoFilename.getText());
//        product.setKind_of_product(ComType.getSelectedItem().toString());
//        //product.setKind_of_product((String) (ComType.toString()? 0 : 1));
////        product.setFechaNacimiento(dateFechaNacimiento.getDate());
//        product.setDate_of_admission(dateDate_of_admission.getDate());
//        product.setPrice(Integer.parseInt(txtPrice.getText()));
//        
//        return product;
//    }
//    
//    public void getBox(String boxType){
//        box = boxType;
//    }
    
     public void llenarLista(){
        ProductSale tAux;    
        DefaultTableModel modelo;
        String columnas [] = new String []{"Identification","Customer name","Id","Name","kind_of_product","price","date_of_admission"}; 
        modelo = new DefaultTableModel(null,columnas);
        Object datos [] = new Object[7];
        for (int i = 0; i< cl.getTamanio(); i++) {
        tAux= new ProductSale();
        tAux = (ProductSale)cl.getElement(i);
        
        datos[0]= tAux.getIdSell();
        datos[1]= tAux.getNameSell();
        datos[2]= tAux.getId();
        datos[3]= tAux.getName();
        datos[4]= tAux.getType();
        datos[5]= tAux.getPrice();
        datos[6]= tAux.getDate_of_admission();
       
        modelo.addRow(datos);
        }
        table1.setModel(modelo);
    }           
     
     private boolean validateView() {
        boolean validate = !(txtId1.getText().equals("")
                || txtName1.getText().equals("")
                || txtId.getText().equals("")
                || txtName.getText().equals("")     
                || ComType1.getSelectedItem().equals("")
                || (dateDate_of_admission.getDate() == null)
                //|| (datHired.getDate() == null)
                || txtPrice.getText().equals(""));

        return validate;
    }

    /**
     * Obtain the view data and tranfer it to the object
     */
    private ProductSale view2Object() {
        ProductSale productSale = new ProductSale();

        productSale.setIdSell(Long.parseLong(txtId1.getText()));
        productSale.setNameSell(txtName1.getText());
        productSale.setId(Long.parseLong(txtId.getText()));
        productSale.setName(txtName.getText());
        productSale.setKind_of_product(ComType1.getSelectedItem().toString());
        productSale.setPhoto(labPhotoFilename.getText());
        //product.setGender(radFemale.isSelected() ? 0 : 1);
        productSale.setDate_of_admission(dateDate_of_admission.getDate());
        //product.setHiredDate(datHired.getDate());
        productSale.setPrice(Integer.parseInt(txtPrice.getText()));
        
        return productSale;
    }

    /**
     * You obtain data from an object and pass it to the view
     */
    private void updateView() {
        if (this.getDataFile().getResultSet() == null) {
            this.newView();
        }
        else {
            this.object2View();
        }
    }

    /**
     * You prepare the view to enter a new productSale data
     */
    private void newView() {
        
        txtId1.setText("");
        txtName1.setText("");
        txtId.setText("");
        txtName.setText("");
        ComType1.setSelectedItem("");
        //txtLastname.setText("");
        labPhotoFilename.setText("");
        labPhoto.setIcon(this.getIconNoPhoto());
        //radFemale.setSelected(true);
        dateDate_of_admission.setDate(new Date(90, 0, 1));
        //datHired.setDate(new Date(108, 6, 15));
        txtPrice.setText("");
        
//        labAge.setText("Age: ");
//        labOld.setText("Old: ");
//        labBenefits.setText("Benefits: ");
        
        btnNew.setText("Save");
        btnFirst.setEnabled(false);
        btnPrevious.setEnabled(false);
        btnNext.setEnabled(false);
        btnLast.setEnabled(false);
        btnSearch.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
    }

    /**
     * Result set -> object
     */
    private void object2View() {
        ProductSale productSale = new ProductSale();
        try {
            productSale.setIdSell(this.getDataFile().getResultSet().getLong("Identification"));
            productSale.setNameSell(this.getDataFile().getResultSet().getString("Customer_name"));
            productSale.setId(this.getDataFile().getResultSet().getLong("id"));
            productSale.setName(this.getDataFile().getResultSet().getString("Name"));
            productSale.setKind_of_product(this.getDataFile().getResultSet().getString("Kind_of_product"));
            productSale.setPhoto(
                    (this.getDataFile().getResultSet().getString("photo") == null) 
                            ? "" : this.getDataFile().getResultSet().getString("photo"));
            //product.setGender(this.getDataFile().getResultSet().getInt("gender"));
            productSale.setDate_of_admission(this.getDataFile().getResultSet().getDate("Date_of_admission"));
            //product.setHiredDate(this.getDataFile().getResultSet().getDate("hiredDate"));
            productSale.setPrice(this.getDataFile().getResultSet().getInt("price"));

            this.object2View(productSale);
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceSale.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Show the object data into view
     * @param productSale Employee to show
     */
    private void object2View(ProductSale productSale) {
        
        txtId1.setText("" + productSale.getId());
        txtName1.setText(productSale.getName());
        txtId.setText("" + productSale.getId());
        txtName.setText(productSale.getName());
        ComType1.setSelectedItem(productSale.getDate_of_admission());
        //txtLastname.setText(product.getLastname());

        if (productSale.getPhoto().equals("")) {
            labPhotoFilename.setText("");
            labPhoto.setIcon(this.getIconNoPhoto());
        }
        else {
            labPhotoFilename.setText(productSale.getPhoto());
            ImageIcon iconPhoto = new ImageIcon(labPhotoFilename.getText());
            labPhoto.setIcon(iconPhoto);
        }
        
        //radFemale.setSelected(product.getGender() == 0);
        dateDate_of_admission.setDate(productSale.getDate_of_admission());
        //datHired.setDate(product.getHiredDate());
        txtPrice.setText("" + productSale.getPrice());
    }

    /**
     * Select employees from DB
     */
    private void selectSale() {
        String query = "SELECT * FROM SaleProduct";
        if (this.getDataFile().execute(query)) {
            try {
                this.getDataFile().getResultSet().next();
                this.updateView();
            } catch (SQLException ex) {
                Logger.getLogger(InterfaceSale.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * Insert new productSale
     */
    private void insertSale() {
        ProductSale productSale = this.view2Object();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        String query = "INSERT INTO SaleProduct "
                + "(Identification, Customer_name, id, Name, Kind_of_product, photo, Date_of_admission, price) "
                + "VALUES ("
                + productSale.getIdSell()+ ", '"
                + productSale.getNameSell()+ "', '"
                + productSale.getId() + "', '"
                + productSale.getName()+ "', '"
                + productSale.getKind_of_product()+ "', '"
                + productSale.getPhoto() + "', #"         //"', "
               // + product.getGender() + ", #"
                + dateFormat.format(productSale.getDate_of_admission()) + "#, "
                //+ dateFormat.format(product.getHiredDate()) + "#, "
                + productSale.getPrice() + ")";
        if (this.getDataFile().execute(query)) {
            this.selectSale();
            this.searchSale(productSale.getId());
        }
    }

    /**
     * Update productSale
     */
    private void updateSale() {
        ProductSale productSale = this.view2Object();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        String query = "UPDATE SaleProduct SET "
                + "Identification = '" + productSale.getIdSell() + ", '"
                + "Customer_name = '" + productSale.getNameSell()+ "', "
                + "Name = '" + productSale.getName()+ "', "
                + "Kind_of_product = '" + productSale.getKind_of_product()+ "', "
                + "photo = '" + productSale.getPhoto() + "', "
              //+ "gender = " + product.getGender() + ", "
                + "date_of_admission = #" + dateFormat.format(productSale.getDate_of_admission()) + "#, "
              //  + "hiredDate = #" + dateFormat.format(product.getHiredDate()) + "#, "
                + "price = " + productSale.getPrice()+ " "
                + "WHERE id = " + productSale.getId();
        if (this.getDataFile().execute(query)) {
            this.selectSale();
            this.searchSale(productSale.getId());
        }
    }

    /**
     * Delete productSale
     */
    private void deleteSale() {
        ProductSale productSale = this.view2Object();
        String query = "DELETE * FROM SaleProduct WHERE id = " + productSale.getId();
        if (this.getDataFile().execute(query)) {
            this.selectSale();
        }        
    }

    /**
     * Search productSale by id
     * @param id Employee id
     */
    private void searchSale(long id) {
        boolean find = false;
        try {
            if (this.getDataFile().getResultSet() != null) {
                Long lastId = this.getDataFile().getResultSet().getLong("id");
                this.getDataFile().getResultSet().beforeFirst();
                while (this.getDataFile().getResultSet().next()) {
                    if (this.getDataFile().getResultSet().getLong("id") == id) {
                        find = true;
                        break;
                    }
                }
                if (find) {
                    this.updateView();
                }
                else {
                    this.getDataFile().getResultSet().first();
                    this.searchSale(lastId);
                    JOptionPane.showMessageDialog(this, "Sale " + id + " was not found!");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceSale.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
